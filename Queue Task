import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class BankQueueSimulator {

    // --- Inner Customer class ---
    static class Customer {
        private static int counter = 1;
        private int number;
        private String name;

        public Customer(String name) {
            this.name = name;
            this.number = counter++;
        }

        public int getNumber() {
            return number;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return "Customer #" + number + ": " + name;
        }
    }

    // --- Main method ---
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Queue<Customer> queue = new LinkedList<>();
        int choice;

        do {
            System.out.println("\n--- Bank Queue System ---");
            System.out.println("1. Add customer to queue");
            System.out.println("2. Serve next customer");
            System.out.println("3. View queue");
            System.out.println("4. Exit");
            System.out.print("Enter choice: ");

            while (!scanner.hasNextInt()) {
                System.out.print("Invalid input. Enter a number: ");
                scanner.next();
            }

            choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    System.out.print("Enter customer name: ");
                    String name = scanner.nextLine();
                    Customer newCustomer = new Customer(name);
                    queue.add(newCustomer);
                    System.out.println("Customer added: " + newCustomer);
                    break;

                case 2:
                    if (queue.isEmpty()) {
                        System.out.println("No customers to serve.");
                    } else {
                        Customer served = queue.poll();
                        System.out.println("Serving customer: " + served);
                    }
                    break;

                case 3:
                    if (queue.isEmpty()) {
                        System.out.println("The queue is currently empty.");
                    } else {
                        System.out.println("Current Queue:");
                        for (Customer c : queue) {
                            System.out.println(" - " + c);
                        }
                    }
                    break;

                case 4:
                    System.out.println("Exiting system...");
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }

        } while (choice != 4);

        scanner.close();
    }
}
